/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  StdError,
  StdErrorInterface,
} from "../../../forge-std/StdError.sol/StdError";

const _abi = [
  {
    inputs: [],
    name: "arithmeticError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "assertionError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "divisionError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "encodeStorageError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enumConversionError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "indexOOBError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "memOverflowError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "popError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "zeroVarError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601957610325908161001f823930815050f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816305ee86121461023f57508063103329771461020a5780631de45560146101d55780638995290f146101a0578063986c5f681461016b578063b22dc54d14610136578063b67689da14610101578063d160e4de146100cc5763fa784a441461008257600080fd5b60003660031901126100c7576100c3604051634e487b7160e01b602082015260126024820152602481526100b760448261026e565b604051918291826102a6565b0390f35b600080fd5b60003660031901126100c7576100c3604051634e487b7160e01b602082015260226024820152602481526100b760448261026e565b60003660031901126100c7576100c3604051634e487b7160e01b602082015260516024820152602481526100b760448261026e565b60003660031901126100c7576100c3604051634e487b7160e01b602082015260316024820152602481526100b760448261026e565b60003660031901126100c7576100c3604051634e487b7160e01b602082015260416024820152602481526100b760448261026e565b60003660031901126100c7576100c3604051634e487b7160e01b602082015260116024820152602481526100b760448261026e565b60003660031901126100c7576100c3604051634e487b7160e01b602082015260216024820152602481526100b760448261026e565b60003660031901126100c7576100c3604051634e487b7160e01b602082015260016024820152602481526100b760448261026e565b60003660031901126100c7576100c390634e487b7160e01b602082015260326024820152602481526100b76044825b90601f8019910116810190811067ffffffffffffffff82111761029057604052565b634e487b7160e01b600052604160045260246000fd5b91909160208152825180602083015260005b8181106102d9575060409293506000838284010152601f8019910116010190565b80602080928701015160408286010152016102b856fea26469706673582212204ed919a7790d42029c2b80962c84b5151a1deb225f087222b249e206c254860764736f6c634300081a0033";

type StdErrorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StdErrorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StdError__factory extends ContractFactory {
  constructor(...args: StdErrorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      StdError & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): StdError__factory {
    return super.connect(runner) as StdError__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StdErrorInterface {
    return new Interface(_abi) as StdErrorInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): StdError {
    return new Contract(address, _abi, runner) as unknown as StdError;
  }
}
