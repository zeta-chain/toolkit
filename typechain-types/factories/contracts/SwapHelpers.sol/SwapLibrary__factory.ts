/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SwapLibrary,
  SwapLibraryInterface,
} from "../../../contracts/SwapHelpers.sol/SwapLibrary";

const _abi = [
  {
    inputs: [],
    name: "SwapFailed",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212209cc79b110287418cb219dd175750fea1e5db9efce798a4cad525948e93cfeaee64736f6c634300081a0033";

type SwapLibraryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapLibraryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapLibrary__factory extends ContractFactory {
  constructor(...args: SwapLibraryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SwapLibrary & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SwapLibrary__factory {
    return super.connect(runner) as SwapLibrary__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapLibraryInterface {
    return new Interface(_abi) as SwapLibraryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SwapLibrary {
    return new Contract(address, _abi, runner) as unknown as SwapLibrary;
  }
}
