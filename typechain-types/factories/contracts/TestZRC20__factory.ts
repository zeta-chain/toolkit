/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { TestZRC20, TestZRC20Interface } from "../../contracts/TestZRC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
    ],
    name: "bytesToAddress",
    outputs: [
      {
        internalType: "address",
        name: "output",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "to",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawGasFee",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052346103ba57610cd080380380610019816103be565b9283398101906060818303126103ba57805160208201519091906001600160401b0381116103ba578361004d9183016103e3565b60408201519093906001600160401b0381116103ba5761006d92016103e3565b82519091906001600160401b0381116102cb57600354600181811c911680156103b0575b60208210146102ad57601f811161034d575b506020601f82116001146102ea57819293945f926102df575b50508160011b915f199060031b1c1916176003555b81516001600160401b0381116102cb57600454600181811c911680156102c1575b60208210146102ad57601f811161024a575b50602092601f82116001146101e957928192935f926101de575b50508160011b915f199060031b1c1916176004555b670de0b6b3a7640000810290808204670de0b6b3a764000014901517156101b75733156101cb576002548181018091116101b757600255335f525f60205260405f208181540190556040519081525f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a360405161089b90816104358239f35b634e487b7160e01b5f52601160045260245ffd5b63ec442f0560e01b5f525f60045260245ffd5b015190505f8061011e565b601f1982169360045f52805f20915f5b868110610232575083600195961061021a575b505050811b01600455610133565b01515f1960f88460031b161c191690555f808061020c565b919260206001819286850151815501940192016101f9565b60045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c810191602084106102a3575b601f0160051c01905b8181106102985750610104565b5f815560010161028b565b9091508190610282565b634e487b7160e01b5f52602260045260245ffd5b90607f16906100f2565b634e487b7160e01b5f52604160045260245ffd5b015190505f806100bc565b601f1982169060035f52805f20915f5b8181106103355750958360019596971061031d575b505050811b016003556100d1565b01515f1960f88460031b161c191690555f808061030f565b9192602060018192868b0151815501940192016102fa565b60035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106103a6575b601f0160051c01905b81811061039b57506100a3565b5f815560010161038e565b9091508190610385565b90607f1690610091565b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176102cb57604052565b81601f820112156103ba578051906001600160401b0382116102cb57610412601f8301601f19166020016103be565b92828452602083830101116103ba57815f9260208093018386015e830101529056fe60806040526004361015610011575f80fd5b5f3560e01c806306fdde03146100e4578063095ea7b3146100df57806318160ddd146100da57806323b872dd146100d55780632c27d3ab146100d0578063313ce567146100cb57806347e7ef24146100c657806370a08231146100c157806395d89b41146100bc578063a9059cbb146100b7578063c7012626146100b2578063d9eeebed146100ad5763dd62ed3e146100a8575f80fd5b610631565b610612565b6105ba565b610589565b6104d4565b61049d565b610478565b61045d565b6103da565b61030c565b6102ef565b610236565b610113565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b34610206575f366003190112610206576040515f6003548060011c90600181169081156101fc575b6020831082146101e85782855260208501919081156101cf575060011461017d575b6101798461016d8186038261069c565b604051918291826100e9565b0390f35b60035f9081529250907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8184106101bb5750500161016d8261015d565b8054848401526020909301926001016101a8565b60ff191682525090151560051b01905061016d8261015d565b634e487b7160e01b5f52602260045260245ffd5b91607f169161013b565b5f80fd5b600435906001600160a01b038216820361020657565b602435906001600160a01b038216820361020657565b346102065760403660031901126102065761024f61020a565b60243533156102dc576001600160a01b0382169182156102c95761028f8291335f52600160205260405f209060018060a01b03165f5260205260405f2090565b5560405190815233907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590602090a3602060405160018152f35b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b34610206575f366003190112610206576020600254604051908152f35b346102065760603660031901126102065761032561020a565b61032d610220565b6001600160a01b0382165f9081526001602090815260408083203384529091529020549160443591905f198410610375575b6103699350610721565b60405160018152602090f35b8284106103915761038c836103699503338361081f565b61035f565b8284637dc7a0d960e11b5f523360045260245260445260645ffd5b9181601f840112156102065782359167ffffffffffffffff8311610206576020838186019501011161020657565b346102065760603660031901126102065760043567ffffffffffffffff81116102065761040b9036906004016103ac565b906024359160443591828401808511610449576020946104359361042e936106c3565b36916106db565b01516040516001600160a01b039091168152f35b634e487b7160e01b5f52601160045260245ffd5b34610206575f36600319011261020657602060405160128152f35b346102065760403660031901126102065761049161020a565b50602060405160018152f35b34610206576020366003190112610206576001600160a01b036104be61020a565b165f525f602052602060405f2054604051908152f35b34610206575f366003190112610206576040515f6004548060011c906001811690811561057f575b6020831082146101e85782855260208501919081156101cf575060011461052d576101798461016d8186038261069c565b60045f9081529250907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b81841061056b5750500161016d8261015d565b805484840152602090930192600101610558565b91607f16916104fc565b34610206576040366003190112610206576105af6105a561020a565b6024359033610721565b602060405160018152f35b346102065760403660031901126102065760043567ffffffffffffffff8111610206576105eb9036906004016103ac565b6024359060201161020657601461060a600c61036994018236916106db565b015133610721565b34610206575f36600319011261020657604080513081525f6020820152f35b3461020657604036600319011261020657602061067f61064f61020a565b610657610220565b6001600160a01b039182165f9081526001855260408082209290931681526020919091522090565b54604051908152f35b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff8211176106be57604052565b610688565b90939293848311610206578411610206578101920390565b92919267ffffffffffffffff82116106be5760405191610705601f8201601f19166020018461069c565b829481845281830111610206578281602093845f960137010152565b916001600160a01b03831691821561080c576001600160a01b0381169384156107f9576001600160a01b0381165f908152602081905260409020548381106107de576107d99284926107a97fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef966107c394039160018060a01b03165f525f60205260405f2090565b556001600160a01b03165f90815260208190526040902090565b8054820190556040519081529081906020820190565b0390a3565b83908563391434e360e21b5f5260045260245260445260645ffd5b63ec442f0560e01b5f525f60045260245ffd5b634b637e8f60e11b5f525f60045260245ffd5b6001600160a01b03169081156102dc576001600160a01b038116156102c957610862915f52600160205260405f209060018060a01b03165f5260205260405f2090565b5556fea2646970667358221220f639b6fe7c316399c43e49cf424f93336e21513317eb48cf554f2f57f15438e164736f6c634300081a0033";

type TestZRC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestZRC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestZRC20__factory extends ContractFactory {
  constructor(...args: TestZRC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialSupply: BigNumberish,
    name: string,
    symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      initialSupply,
      name,
      symbol,
      overrides || {}
    );
  }
  override deploy(
    initialSupply: BigNumberish,
    name: string,
    symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      initialSupply,
      name,
      symbol,
      overrides || {}
    ) as Promise<
      TestZRC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestZRC20__factory {
    return super.connect(runner) as TestZRC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestZRC20Interface {
    return new Interface(_abi) as TestZRC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestZRC20 {
    return new Contract(address, _abi, runner) as unknown as TestZRC20;
  }
}
