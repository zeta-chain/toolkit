/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { TestZRC20, TestZRC20Interface } from "../../contracts/TestZRC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
    ],
    name: "bytesToAddress",
    outputs: [
      {
        internalType: "address",
        name: "output",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "to",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawGasFee",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052346103d457610d6580380380610019816103d9565b9283398101906060818303126103d457805160208201519091906001600160401b0381116103d4578361004d9183016103fe565b60408201519093906001600160401b0381116103d45761006d92016103fe565b82519091906001600160401b0381116102dd57600354600181811c911680156103ca575b60208210146102bd57601f8111610365575b506020601f82116001146102fe57819293946000926102f3575b50508160011b916000199060031b1c1916176003555b81516001600160401b0381116102dd57600454600181811c911680156102d3575b60208210146102bd57601f8111610258575b50602092601f82116001146101f357928192936000926101e8575b50508160011b916000199060031b1c1916176004555b670de0b6b3a7640000810290808204670de0b6b3a764000014901517156101bc5733156101d2576002548181018091116101bc57600255600033815280602052604081208281540190556040519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a36040516108fb908161046a8239f35b634e487b7160e01b600052601160045260246000fd5b63ec442f0560e01b600052600060045260246000fd5b015190503880610121565b601f198216936004600052806000209160005b8681106102405750836001959610610227575b505050811b01600455610137565b015160001960f88460031b161c19169055388080610219565b91926020600181928685015181550194019201610206565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c810191602084106102b3575b601f0160051c01905b8181106102a75750610106565b6000815560010161029a565b9091508190610291565b634e487b7160e01b600052602260045260246000fd5b90607f16906100f4565b634e487b7160e01b600052604160045260246000fd5b0151905038806100bd565b601f198216906003600052806000209160005b81811061034d57509583600195969710610334575b505050811b016003556100d3565b015160001960f88460031b161c19169055388080610326565b9192602060018192868b015181550194019201610311565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106103c0575b601f0160051c01905b8181106103b457506100a3565b600081556001016103a7565b909150819061039e565b90607f1690610091565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176102dd57604052565b81601f820112156103d4578051906001600160401b0382116102dd5761042d601f8301601f19166020016103d9565b92828452602083830101116103d45760005b82811061045457505060206000918301015290565b8060208092840101518282870101520161043f56fe6080604052600436101561001257600080fd5b60003560e01c806306fdde03146100e7578063095ea7b3146100e257806318160ddd146100dd57806323b872dd146100d85780632c27d3ab146100d3578063313ce567146100ce57806347e7ef24146100c957806370a08231146100c457806395d89b41146100bf578063a9059cbb146100ba578063c7012626146100b5578063d9eeebed146100b05763dd62ed3e146100ab57600080fd5b610678565b610657565b6105f8565b6105c7565b61050f565b6104d5565b6104b0565b610494565b61040f565b61033d565b61031f565b61025c565b610135565b91909160208152825180602083015260005b81811061011f575060409293506000838284010152601f8019910116010190565b80602080928701015160408286010152016100fe565b3461022b57600036600319011261022b5760405160006003548060011c9060018116908115610221575b60208310821461020d5782855260208501919081156101f457506001146101a1575b61019d84610191818603826106e6565b604051918291826100ec565b0390f35b600360009081529250907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8184106101e05750500161019182610181565b8054848401526020909301926001016101cd565b60ff191682525090151560051b01905061019182610181565b634e487b7160e01b84526022600452602484fd5b91607f169161015f565b600080fd5b600435906001600160a01b038216820361022b57565b602435906001600160a01b038216820361022b57565b3461022b57604036600319011261022b57610275610230565b6024353315610309576001600160a01b0382169182156102f3576102b9829133600052600160205260406000209060018060a01b0316600052602052604060002090565b5560405190815233907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590602090a3602060405160018152f35b634a1406b160e11b600052600060045260246000fd5b63e602df0560e01b600052600060045260246000fd5b3461022b57600036600319011261022b576020600254604051908152f35b3461022b57606036600319011261022b57610356610230565b61035e610246565b6001600160a01b038216600090815260016020908152604080832033845290915290205491604435919060001984106103a8575b61039c935061076c565b60405160018152602090f35b8284106103c4576103bf8361039c9503338361087b565b610392565b8284637dc7a0d960e11b6000523360045260245260445260646000fd5b9181601f8401121561022b5782359167ffffffffffffffff831161022b576020838186019501011161022b57565b3461022b57606036600319011261022b5760043567ffffffffffffffff811161022b576104409036906004016103e1565b90602435916044359182840180851161047e5760209461046a936104639361070d565b3691610725565b01516040516001600160a01b039091168152f35b634e487b7160e01b600052601160045260246000fd5b3461022b57600036600319011261022b57602060405160128152f35b3461022b57604036600319011261022b576104c9610230565b50602060405160018152f35b3461022b57602036600319011261022b576001600160a01b036104f6610230565b1660005260006020526020604060002054604051908152f35b3461022b57600036600319011261022b5760405160006004548060011c90600181169081156105bd575b60208310821461020d5782855260208501919081156101f4575060011461056a5761019d84610191818603826106e6565b600460009081529250907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8184106105a95750500161019182610181565b805484840152602090930192600101610596565b91607f1691610539565b3461022b57604036600319011261022b576105ed6105e3610230565b602435903361076c565b602060405160018152f35b3461022b57604036600319011261022b5760043567ffffffffffffffff811161022b576106299036906004016103e1565b602435906000906020116106545750601461064c600c61039c9401823691610725565b01513361076c565b80fd5b3461022b57600036600319011261022b576040805130815260006020820152f35b3461022b57604036600319011261022b5760206106c7610696610230565b61069e610246565b6001600160a01b0391821660009081526001855260408082209290931681526020919091522090565b54604051908152f35b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761070857604052565b6106d0565b9093929384831161022b57841161022b578101920390565b92919267ffffffffffffffff8211610708576040519161074f601f8201601f1916602001846106e6565b82948184528183011161022b578281602093846000960137010152565b916001600160a01b038316918215610865576001600160a01b03811693841561084f576001600160a01b03811660009081526020819052604081209091905484811061083357928492610818926107fc7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9761082e97039160018060a01b03166000526000602052604060002090565b55506001600160a01b0316600090815260208190526040902090565b8054820190556040519081529081906020820190565b0390a3565b63391434e360e21b835260048690526024526044849052606482fd5b63ec442f0560e01b600052600060045260246000fd5b634b637e8f60e11b600052600060045260246000fd5b6001600160a01b0316908115610309576001600160a01b038116156102f3576108c291600052600160205260406000209060018060a01b0316600052602052604060002090565b5556fea2646970667358221220e1bd51540e140e6a910036c3a6fb4ec6f0526031817dd6c8ab24b7be89b24edf64736f6c634300081a0033";

type TestZRC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestZRC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestZRC20__factory extends ContractFactory {
  constructor(...args: TestZRC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialSupply: BigNumberish,
    name: string,
    symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      initialSupply,
      name,
      symbol,
      overrides || {}
    );
  }
  override deploy(
    initialSupply: BigNumberish,
    name: string,
    symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      initialSupply,
      name,
      symbol,
      overrides || {}
    ) as Promise<
      TestZRC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestZRC20__factory {
    return super.connect(runner) as TestZRC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestZRC20Interface {
    return new Interface(_abi) as TestZRC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestZRC20 {
    return new Contract(address, _abi, runner) as unknown as TestZRC20;
  }
}
