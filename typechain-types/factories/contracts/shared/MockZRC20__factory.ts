/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockZRC20,
  MockZRC20Interface,
} from "../../../contracts/shared/MockZRC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "to",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gasfee",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "protocolFlatFee",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
    ],
    name: "bytesToAddress",
    outputs: [
      {
        internalType: "address",
        name: "output",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gasFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gasFeeAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gasFee_",
        type: "uint256",
      },
    ],
    name: "setGasFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "gasFeeAddress_",
        type: "address",
      },
    ],
    name: "setGasFeeAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "to",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawGasFee",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052346103e657610f4780380380610019816103eb565b9283398101906060818303126103e657805160208201519091906001600160401b0381116103e6578361004d918301610410565b60408201519093906001600160401b0381116103e65761006d9201610410565b82519091906001600160401b0381116102ef57600354600181811c911680156103dc575b60208210146102cf57601f8111610377575b506020601f82116001146103105781929394600092610305575b50508160011b916000199060031b1c1916176003555b81516001600160401b0381116102ef57600454600181811c911680156102e5575b60208210146102cf57601f811161026a575b50602092601f821160011461020557928192936000926101fa575b50508160011b916000199060031b1c1916176004555b670de0b6b3a7640000810290808204670de0b6b3a764000014901517156101ce5733156101e4576002548181018091116101ce57600255600033815280602052604081208281540190556040519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a3600580546001600160a01b03191630179055604051610acb908161047c8239f35b634e487b7160e01b600052601160045260246000fd5b63ec442f0560e01b600052600060045260246000fd5b015190503880610121565b601f198216936004600052806000209160005b8681106102525750836001959610610239575b505050811b01600455610137565b015160001960f88460031b161c1916905538808061022b565b91926020600181928685015181550194019201610218565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c810191602084106102c5575b601f0160051c01905b8181106102b95750610106565b600081556001016102ac565b90915081906102a3565b634e487b7160e01b600052602260045260246000fd5b90607f16906100f4565b634e487b7160e01b600052604160045260246000fd5b0151905038806100bd565b601f198216906003600052806000209160005b81811061035f57509583600195969710610346575b505050811b016003556100d3565b015160001960f88460031b161c19169055388080610338565b9192602060018192868b015181550194019201610323565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106103d2575b601f0160051c01905b8181106103c657506100a3565b600081556001016103b9565b90915081906103b0565b90607f1690610091565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176102ef57604052565b81601f820112156103e6578051906001600160401b0382116102ef5761043f601f8301601f19166020016103eb565b92828452602083830101116103e65760005b82811061046657505060206000918301015290565b8060208092840101518282870101520161045156fe6080604052600436101561001257600080fd5b60003560e01c806306fdde0314610127578063095ea7b31461012257806318160ddd1461011d57806323b872dd146101185780632c27d3ab14610113578063313ce5671461010e5780633e8a4ee11461010957806347e7ef2414610104578063658612e9146100ff578063678edca3146100fa57806370a08231146100f557806395d89b41146100f0578063a9059cbb146100eb578063c7012626146100e6578063d9eeebed146100e1578063dd62ed3e146100dc5763f7d8f616146100d757600080fd5b610831565b6107d9565b6107ac565b6106ae565b61067d565b6105c5565b61058b565b610572565b610554565b61052f565b6104f0565b6104d4565b61044f565b61037d565b61035f565b61029c565b610175565b91909160208152825180602083015260005b81811061015f575060409293506000838284010152601f8019910116010190565b806020809287010151604082860101520161013e565b3461026b57600036600319011261026b5760405160006003548060011c9060018116908115610261575b60208310821461024d57828552602085019190811561023457506001146101e1575b6101dd846101d181860382610870565b6040519182918261012c565b0390f35b600360009081529250907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b818410610220575050016101d1826101c1565b80548484015260209093019260010161020d565b60ff191682525090151560051b0190506101d1826101c1565b634e487b7160e01b84526022600452602484fd5b91607f169161019f565b600080fd5b600435906001600160a01b038216820361026b57565b602435906001600160a01b038216820361026b57565b3461026b57604036600319011261026b576102b5610270565b6024353315610349576001600160a01b038216918215610333576102f9829133600052600160205260406000209060018060a01b0316600052602052604060002090565b5560405190815233907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590602090a3602060405160018152f35b634a1406b160e11b600052600060045260246000fd5b63e602df0560e01b600052600060045260246000fd5b3461026b57600036600319011261026b576020600254604051908152f35b3461026b57606036600319011261026b57610396610270565b61039e610286565b6001600160a01b038216600090815260016020908152604080832033845290915290205491604435919060001984106103e8575b6103dc9350610906565b60405160018152602090f35b828410610404576103ff836103dc95033383610a4b565b6103d2565b8284637dc7a0d960e11b6000523360045260245260445260646000fd5b9181601f8401121561026b5782359167ffffffffffffffff831161026b576020838186019501011161026b57565b3461026b57606036600319011261026b5760043567ffffffffffffffff811161026b57610480903690600401610421565b9060243591604435918284018085116104be576020946104aa936104a393610897565b36916108af565b01516040516001600160a01b039091168152f35b634e487b7160e01b600052601160045260246000fd5b3461026b57600036600319011261026b57602060405160128152f35b3461026b57602036600319011261026b576001600160a01b03610511610270565b166bffffffffffffffffffffffff60a01b6005541617600555600080f35b3461026b57604036600319011261026b57610548610270565b50602060405160018152f35b3461026b57600036600319011261026b576020600654604051908152f35b3461026b57602036600319011261026b57600435600655005b3461026b57602036600319011261026b576001600160a01b036105ac610270565b1660005260006020526020604060002054604051908152f35b3461026b57600036600319011261026b5760405160006004548060011c9060018116908115610673575b60208310821461024d5782855260208501919081156102345750600114610620576101dd846101d181860382610870565b600460009081529250907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b81841061065f575050016101d1826101c1565b80548484015260209093019260010161064c565b91607f16916105ef565b3461026b57604036600319011261026b576106a3610699610270565b6024359033610906565b602060405160018152f35b3461026b57604036600319011261026b5760043567ffffffffffffffff811161026b576107696106e56101dd923690600401610421565b9060243591602081101561077b577f9ffbffc04a397460ee1dbe8c9503e098090567d6b7f4b3c02a8617d800b6d95561071e8284610a33565b925b60065483604051926080845281608085015260a0840137600060a0858401015285602083015260408201526000606082015260a0813394601f80199101168101030190a26108f6565b60405190151581529081906020820190565b7f9ffbffc04a397460ee1dbe8c9503e098090567d6b7f4b3c02a8617d800b6d9556107a68284610a15565b92610720565b3461026b57600036600319011261026b57604060018060a01b036005541660065482519182526020820152f35b3461026b57604036600319011261026b5760206108286107f7610270565b6107ff610286565b6001600160a01b0391821660009081526001855260408082209290931681526020919091522090565b54604051908152f35b3461026b57600036600319011261026b576005546040516001600160a01b039091168152602090f35b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761089257604052565b61085a565b9093929384831161026b57841161026b578101920390565b92919267ffffffffffffffff821161089257604051916108d9601f8201601f191660200184610870565b82948184528183011161026b578281602093846000960137010152565b906109019133610906565b600190565b916001600160a01b0383169182156109ff576001600160a01b0381169384156109e9576001600160a01b0381166000908152602081905260408120909190548481106109cd579284926109b2926109967fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef976109c897039160018060a01b03166000526000602052604060002090565b55506001600160a01b0316600090815260208190526040902090565b8054820190556040519081529081906020820190565b0390a3565b63391434e360e21b835260048690526024526044849052606482fd5b63ec442f0560e01b600052600060045260246000fd5b634b637e8f60e11b600052600060045260246000fd5b9060201161026b57610a2e600c601492018236916108af565b015190565b9060141161026b57610a2e81601492508236916108af565b6001600160a01b0316908115610349576001600160a01b0381161561033357610a9291600052600160205260406000209060018060a01b0316600052602052604060002090565b5556fea264697066735822122028901d6b6e72aa483ee04dd269665e17d7038ff6b45d4d131ff29d305f88dbcc64736f6c634300081a0033";

type MockZRC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockZRC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockZRC20__factory extends ContractFactory {
  constructor(...args: MockZRC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialSupply: BigNumberish,
    name: string,
    symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      initialSupply,
      name,
      symbol,
      overrides || {}
    );
  }
  override deploy(
    initialSupply: BigNumberish,
    name: string,
    symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      initialSupply,
      name,
      symbol,
      overrides || {}
    ) as Promise<
      MockZRC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockZRC20__factory {
    return super.connect(runner) as MockZRC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockZRC20Interface {
    return new Interface(_abi) as MockZRC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockZRC20 {
    return new Contract(address, _abi, runner) as unknown as MockZRC20;
  }
}
