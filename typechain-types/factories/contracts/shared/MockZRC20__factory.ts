/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockZRC20,
  MockZRC20Interface,
} from "../../../contracts/shared/MockZRC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "to",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gasfee",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "protocolFlatFee",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
    ],
    name: "bytesToAddress",
    outputs: [
      {
        internalType: "address",
        name: "output",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gasFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gasFeeAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gasFee_",
        type: "uint256",
      },
    ],
    name: "setGasFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "gasFeeAddress_",
        type: "address",
      },
    ],
    name: "setGasFeeAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "to",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawGasFee",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052346103cc57610eb580380380610019816103d0565b9283398101906060818303126103cc57805160208201519091906001600160401b0381116103cc578361004d9183016103f5565b60408201519093906001600160401b0381116103cc5761006d92016103f5565b82519091906001600160401b0381116102dd57600354600181811c911680156103c2575b60208210146102bf57601f811161035f575b506020601f82116001146102fc57819293945f926102f1575b50508160011b915f199060031b1c1916176003555b81516001600160401b0381116102dd57600454600181811c911680156102d3575b60208210146102bf57601f811161025c575b50602092601f82116001146101fb57928192935f926101f0575b50508160011b915f199060031b1c1916176004555b670de0b6b3a7640000810290808204670de0b6b3a764000014901517156101c95733156101dd576002548181018091116101c957600255335f525f60205260405f208181540190556040519081525f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a3600580546001600160a01b03191630179055604051610a6e90816104478239f35b634e487b7160e01b5f52601160045260245ffd5b63ec442f0560e01b5f525f60045260245ffd5b015190505f8061011e565b601f1982169360045f52805f20915f5b868110610244575083600195961061022c575b505050811b01600455610133565b01515f1960f88460031b161c191690555f808061021e565b9192602060018192868501518155019401920161020b565b60045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c810191602084106102b5575b601f0160051c01905b8181106102aa5750610104565b5f815560010161029d565b9091508190610294565b634e487b7160e01b5f52602260045260245ffd5b90607f16906100f2565b634e487b7160e01b5f52604160045260245ffd5b015190505f806100bc565b601f1982169060035f52805f20915f5b8181106103475750958360019596971061032f575b505050811b016003556100d1565b01515f1960f88460031b161c191690555f8080610321565b9192602060018192868b01518155019401920161030c565b60035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c810191602084106103b8575b601f0160051c01905b8181106103ad57506100a3565b5f81556001016103a0565b9091508190610397565b90607f1690610091565b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176102dd57604052565b81601f820112156103cc578051906001600160401b0382116102dd57610424601f8301601f19166020016103d0565b92828452602083830101116103cc57815f9260208093018386015e830101529056fe60806040526004361015610011575f80fd5b5f3560e01c806306fdde0314610124578063095ea7b31461011f57806318160ddd1461011a57806323b872dd146101155780632c27d3ab14610110578063313ce5671461010b5780633e8a4ee11461010657806347e7ef2414610101578063658612e9146100fc578063678edca3146100f757806370a08231146100f257806395d89b41146100ed578063a9059cbb146100e8578063c7012626146100e3578063d9eeebed146100de578063dd62ed3e146100d95763f7d8f616146100d4575f80fd5b6107ed565b610796565b61076a565b61066e565b61063d565b610588565b610551565b610538565b61051b565b6104f6565b6104b8565b61049d565b61041a565b61034c565b61032f565b610276565b610153565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b34610246575f366003190112610246576040515f6003548060011c906001811690811561023c575b60208310821461022857828552602085019190811561020f57506001146101bd575b6101b9846101ad81860382610829565b60405191829182610129565b0390f35b60035f9081529250907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8184106101fb575050016101ad8261019d565b8054848401526020909301926001016101e8565b60ff191682525090151560051b0190506101ad8261019d565b634e487b7160e01b5f52602260045260245ffd5b91607f169161017b565b5f80fd5b600435906001600160a01b038216820361024657565b602435906001600160a01b038216820361024657565b346102465760403660031901126102465761028f61024a565b602435331561031c576001600160a01b038216918215610309576102cf8291335f52600160205260405f209060018060a01b03165f5260205260405f2090565b5560405190815233907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590602090a3602060405160018152f35b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b34610246575f366003190112610246576020600254604051908152f35b346102465760603660031901126102465761036561024a565b61036d610260565b6001600160a01b0382165f9081526001602090815260408083203384529091529020549160443591905f1984106103b5575b6103a993506108be565b60405160018152602090f35b8284106103d1576103cc836103a9950333836109f2565b61039f565b8284637dc7a0d960e11b5f523360045260245260445260645ffd5b9181601f840112156102465782359167ffffffffffffffff8311610246576020838186019501011161024657565b346102465760603660031901126102465760043567ffffffffffffffff81116102465761044b9036906004016103ec565b906024359160443591828401808511610489576020946104759361046e93610850565b3691610868565b01516040516001600160a01b039091168152f35b634e487b7160e01b5f52601160045260245ffd5b34610246575f36600319011261024657602060405160128152f35b34610246576020366003190112610246576001600160a01b036104d961024a565b166bffffffffffffffffffffffff60a01b60055416176005555f80f35b346102465760403660031901126102465761050f61024a565b50602060405160018152f35b34610246575f366003190112610246576020600654604051908152f35b3461024657602036600319011261024657600435600655005b34610246576020366003190112610246576001600160a01b0361057261024a565b165f525f602052602060405f2054604051908152f35b34610246575f366003190112610246576040515f6004548060011c9060018116908115610633575b60208310821461022857828552602085019190811561020f57506001146105e1576101b9846101ad81860382610829565b60045f9081529250907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b81841061061f575050016101ad8261019d565b80548484015260209093019260010161060c565b91607f16916105b0565b346102465760403660031901126102465761066361065961024a565b60243590336108be565b602060405160018152f35b346102465760403660031901126102465760043567ffffffffffffffff8111610246576107276106a56101b99236906004016103ec565b90602435916020811015610739577f9ffbffc04a397460ee1dbe8c9503e098090567d6b7f4b3c02a8617d800b6d9556106de82846109da565b925b60065483604051926080845281608085015260a08401375f60a0858401015285602083015260408201525f606082015260a0813394601f80199101168101030190a26108ae565b60405190151581529081906020820190565b7f9ffbffc04a397460ee1dbe8c9503e098090567d6b7f4b3c02a8617d800b6d95561076482846109bc565b926106e0565b34610246575f36600319011261024657604060018060a01b036005541660065482519182526020820152f35b346102465760403660031901126102465760206107e46107b461024a565b6107bc610260565b6001600160a01b039182165f9081526001855260408082209290931681526020919091522090565b54604051908152f35b34610246575f366003190112610246576005546040516001600160a01b039091168152602090f35b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff82111761084b57604052565b610815565b90939293848311610246578411610246578101920390565b92919267ffffffffffffffff821161084b5760405191610892601f8201601f191660200184610829565b829481845281830111610246578281602093845f960137010152565b906108b991336108be565b600190565b916001600160a01b0383169182156109a9576001600160a01b038116938415610996576001600160a01b0381165f9081526020819052604090205483811061097b576109769284926109467fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9661096094039160018060a01b03165f525f60205260405f2090565b556001600160a01b03165f90815260208190526040902090565b8054820190556040519081529081906020820190565b0390a3565b83908563391434e360e21b5f5260045260245260445260645ffd5b63ec442f0560e01b5f525f60045260245ffd5b634b637e8f60e11b5f525f60045260245ffd5b90602011610246576109d5600c60149201823691610868565b015190565b90601411610246576109d58160149250823691610868565b6001600160a01b031690811561031c576001600160a01b0381161561030957610a35915f52600160205260405f209060018060a01b03165f5260205260405f2090565b5556fea264697066735822122035a186bc169a4145ac3a986dc620597f2ff3a0168aca2cbf0ebbe74fad128e4764736f6c634300081a0033";

type MockZRC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockZRC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockZRC20__factory extends ContractFactory {
  constructor(...args: MockZRC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialSupply: BigNumberish,
    name: string,
    symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      initialSupply,
      name,
      symbol,
      overrides || {}
    );
  }
  override deploy(
    initialSupply: BigNumberish,
    name: string,
    symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      initialSupply,
      name,
      symbol,
      overrides || {}
    ) as Promise<
      MockZRC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockZRC20__factory {
    return super.connect(runner) as MockZRC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockZRC20Interface {
    return new Interface(_abi) as MockZRC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockZRC20 {
    return new Contract(address, _abi, runner) as unknown as MockZRC20;
  }
}
