/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IBaseRegistryErrors,
  IBaseRegistryErrorsInterface,
} from "../../../../../../../@zetachain/protocol-contracts/contracts/helpers/interfaces/IBaseRegistry.sol/IBaseRegistryErrors";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
    ],
    name: "ChainActive",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
    ],
    name: "ChainNonActive",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "contractType",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "addressBytes",
        type: "bytes",
      },
    ],
    name: "ContractAlreadyRegistered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "contractType",
        type: "string",
      },
    ],
    name: "ContractNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "InvalidContractType",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSender",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "address_",
        type: "address",
      },
    ],
    name: "ZRC20AlreadyRegistered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    name: "ZRC20SymbolAlreadyInUse",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
] as const;

export class IBaseRegistryErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IBaseRegistryErrorsInterface {
    return new Interface(_abi) as IBaseRegistryErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IBaseRegistryErrors {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IBaseRegistryErrors;
  }
}
