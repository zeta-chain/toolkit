/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  Callable,
  CallableInterface,
} from "../../../../../../../@zetachain/protocol-contracts/contracts/evm/interfaces/IGatewayEVM.sol/Callable";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
        ],
        internalType: "struct MessageContext",
        name: "context",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "onCall",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class Callable__factory {
  static readonly abi = _abi;
  static createInterface(): CallableInterface {
    return new Interface(_abi) as CallableInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Callable {
    return new Contract(address, _abi, runner) as unknown as Callable;
  }
}
