/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Callee__factory>;
    getContractFactory(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "UniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ERC20__factory>;
    getContractFactory(
      name: "UniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Factory__factory>;
    getContractFactory(
      name: "UniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Pair__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "UniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router02__factory>;
    getContractFactory(
      name: "Abortable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Abortable__factory>;
    getContractFactory(
      name: "Revertable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Revertable__factory>;
    getContractFactory(
      name: "IZRC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZRC20__factory>;
    getContractFactory(
      name: "IZRC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZRC20Metadata__factory>;
    getContractFactory(
      name: "ZRC20Events",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZRC20Events__factory>;
    getContractFactory(
      name: "UniversalContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniversalContract__factory>;
    getContractFactory(
      name: "ZContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZContract__factory>;
    getContractFactory(
      name: "SystemContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SystemContract__factory>;
    getContractFactory(
      name: "SystemContractErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SystemContractErrors__factory>;
    getContractFactory(
      name: "BytesHelperLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BytesHelperLib__factory>;
    getContractFactory(
      name: "ZetaEthMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaEthMock__factory>;
    getContractFactory(
      name: "OnlySystem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnlySystem__factory>;
    getContractFactory(
      name: "Revertable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Revertable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IZRC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZRC20__factory>;
    getContractFactory(
      name: "IZRC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZRC20Metadata__factory>;
    getContractFactory(
      name: "ZRC20Events",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZRC20Events__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "UniswapV2Library",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Library__factory>;
    getContractFactory(
      name: "MockZRC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockZRC20__factory>;
    getContractFactory(
      name: "TestUniswapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUniswapRouter__factory>;
    getContractFactory(
      name: "WZETA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WZETA__factory>;
    getContractFactory(
      name: "SwapHelperLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapHelperLib__factory>;
    getContractFactory(
      name: "SystemContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SystemContract__factory>;
    getContractFactory(
      name: "SystemContractErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SystemContractErrors__factory>;
    getContractFactory(
      name: "TestZRC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestZRC20__factory>;
    getContractFactory(
      name: "UniversalContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniversalContract__factory>;
    getContractFactory(
      name: "ZContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZContract__factory>;

    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Callee",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Callee>;
    getContractAt(
      name: "IUniswapV2ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "UniswapV2ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2ERC20>;
    getContractAt(
      name: "UniswapV2Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Factory>;
    getContractAt(
      name: "UniswapV2Pair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Pair>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "UniswapV2Router02",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Router02>;
    getContractAt(
      name: "Abortable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Abortable>;
    getContractAt(
      name: "Revertable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Revertable>;
    getContractAt(
      name: "IZRC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IZRC20>;
    getContractAt(
      name: "IZRC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IZRC20Metadata>;
    getContractAt(
      name: "ZRC20Events",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ZRC20Events>;
    getContractAt(
      name: "UniversalContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniversalContract>;
    getContractAt(
      name: "ZContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ZContract>;
    getContractAt(
      name: "SystemContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SystemContract>;
    getContractAt(
      name: "SystemContractErrors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SystemContractErrors>;
    getContractAt(
      name: "BytesHelperLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BytesHelperLib>;
    getContractAt(
      name: "ZetaEthMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaEthMock>;
    getContractAt(
      name: "OnlySystem",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OnlySystem>;
    getContractAt(
      name: "Revertable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Revertable>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IZRC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IZRC20>;
    getContractAt(
      name: "IZRC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IZRC20Metadata>;
    getContractAt(
      name: "ZRC20Events",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ZRC20Events>;
    getContractAt(
      name: "Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "UniswapV2Library",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Library>;
    getContractAt(
      name: "MockZRC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockZRC20>;
    getContractAt(
      name: "TestUniswapRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUniswapRouter>;
    getContractAt(
      name: "WZETA",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WZETA>;
    getContractAt(
      name: "SwapHelperLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapHelperLib>;
    getContractAt(
      name: "SystemContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SystemContract>;
    getContractAt(
      name: "SystemContractErrors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SystemContractErrors>;
    getContractAt(
      name: "TestZRC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestZRC20>;
    getContractAt(
      name: "UniversalContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniversalContract>;
    getContractAt(
      name: "ZContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ZContract>;

    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Callee>;
    deployContract(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2ERC20>;
    deployContract(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Factory>;
    deployContract(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Pair>;
    deployContract(
      name: "UniswapV2ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2ERC20>;
    deployContract(
      name: "UniswapV2Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Factory>;
    deployContract(
      name: "UniswapV2Pair",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Pair>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router01>;
    deployContract(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router02>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "UniswapV2Router02",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Router02>;
    deployContract(
      name: "Abortable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Abortable>;
    deployContract(
      name: "Revertable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Revertable>;
    deployContract(
      name: "IZRC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZRC20>;
    deployContract(
      name: "IZRC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZRC20Metadata>;
    deployContract(
      name: "ZRC20Events",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZRC20Events>;
    deployContract(
      name: "UniversalContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniversalContract>;
    deployContract(
      name: "ZContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZContract>;
    deployContract(
      name: "SystemContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SystemContract>;
    deployContract(
      name: "SystemContractErrors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SystemContractErrors>;
    deployContract(
      name: "BytesHelperLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BytesHelperLib>;
    deployContract(
      name: "ZetaEthMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZetaEthMock>;
    deployContract(
      name: "OnlySystem",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OnlySystem>;
    deployContract(
      name: "Revertable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Revertable>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "IZRC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZRC20>;
    deployContract(
      name: "IZRC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZRC20Metadata>;
    deployContract(
      name: "ZRC20Events",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZRC20Events>;
    deployContract(
      name: "Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "UniswapV2Library",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Library>;
    deployContract(
      name: "MockZRC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockZRC20>;
    deployContract(
      name: "TestUniswapRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestUniswapRouter>;
    deployContract(
      name: "WZETA",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WZETA>;
    deployContract(
      name: "SwapHelperLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SwapHelperLib>;
    deployContract(
      name: "SystemContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SystemContract>;
    deployContract(
      name: "SystemContractErrors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SystemContractErrors>;
    deployContract(
      name: "TestZRC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestZRC20>;
    deployContract(
      name: "UniversalContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniversalContract>;
    deployContract(
      name: "ZContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZContract>;

    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IUniswapV2Callee",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Callee>;
    deployContract(
      name: "IUniswapV2ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2ERC20>;
    deployContract(
      name: "IUniswapV2Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Factory>;
    deployContract(
      name: "IUniswapV2Pair",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Pair>;
    deployContract(
      name: "UniswapV2ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2ERC20>;
    deployContract(
      name: "UniswapV2Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Factory>;
    deployContract(
      name: "UniswapV2Pair",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Pair>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IUniswapV2Router01",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router01>;
    deployContract(
      name: "IUniswapV2Router02",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router02>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "UniswapV2Router02",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Router02>;
    deployContract(
      name: "Abortable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Abortable>;
    deployContract(
      name: "Revertable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Revertable>;
    deployContract(
      name: "IZRC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZRC20>;
    deployContract(
      name: "IZRC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZRC20Metadata>;
    deployContract(
      name: "ZRC20Events",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZRC20Events>;
    deployContract(
      name: "UniversalContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniversalContract>;
    deployContract(
      name: "ZContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZContract>;
    deployContract(
      name: "SystemContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SystemContract>;
    deployContract(
      name: "SystemContractErrors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SystemContractErrors>;
    deployContract(
      name: "BytesHelperLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BytesHelperLib>;
    deployContract(
      name: "ZetaEthMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZetaEthMock>;
    deployContract(
      name: "OnlySystem",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OnlySystem>;
    deployContract(
      name: "Revertable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Revertable>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "IZRC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZRC20>;
    deployContract(
      name: "IZRC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZRC20Metadata>;
    deployContract(
      name: "ZRC20Events",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZRC20Events>;
    deployContract(
      name: "Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "UniswapV2Library",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapV2Library>;
    deployContract(
      name: "MockZRC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockZRC20>;
    deployContract(
      name: "TestUniswapRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestUniswapRouter>;
    deployContract(
      name: "WZETA",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WZETA>;
    deployContract(
      name: "SwapHelperLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SwapHelperLib>;
    deployContract(
      name: "SystemContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SystemContract>;
    deployContract(
      name: "SystemContractErrors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SystemContractErrors>;
    deployContract(
      name: "TestZRC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestZRC20>;
    deployContract(
      name: "UniversalContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniversalContract>;
    deployContract(
      name: "ZContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZContract>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
