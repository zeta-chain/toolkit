/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type AbortContextStruct = {
  sender: PromiseOrValue<BytesLike>;
  asset: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  outgoing: PromiseOrValue<boolean>;
  chainID: PromiseOrValue<BigNumberish>;
  revertMessage: PromiseOrValue<BytesLike>;
};

export type AbortContextStructOutput = [
  string,
  string,
  BigNumber,
  boolean,
  BigNumber,
  string
] & {
  sender: string;
  asset: string;
  amount: BigNumber;
  outgoing: boolean;
  chainID: BigNumber;
  revertMessage: string;
};

export interface AbortableInterface extends utils.Interface {
  functions: {
    "onAbort((bytes,address,uint256,bool,uint256,bytes))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "onAbort"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "onAbort",
    values: [AbortContextStruct]
  ): string;

  decodeFunctionResult(functionFragment: "onAbort", data: BytesLike): Result;

  events: {};
}

export interface Abortable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbortableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    onAbort(
      abortContext: AbortContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  onAbort(
    abortContext: AbortContextStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    onAbort(
      abortContext: AbortContextStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    onAbort(
      abortContext: AbortContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    onAbort(
      abortContext: AbortContextStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
